const TelegramBot = require('node-telegram-bot-api');
const cron = require('node-cron');
const db = require('./database');
const config = require('./config');

const bot = new TelegramBot(config.BOT_TOKEN, { polling: true });

// –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ –¥–ª—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
const userStates = {};

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É
async function addUser(userId, userData) {
  try {
    await db.runAsync(`
      INSERT OR REPLACE INTO users (id, username, first_name, last_name)
      VALUES (?, ?, ?, ?)
    `, [userId, userData.username || null, userData.first_name || null, userData.last_name || null]);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
  }
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω
function isAdmin(userId) {
  if (config.ADMIN_IDS && Array.isArray(config.ADMIN_IDS)) {
    return config.ADMIN_IDS.includes(userId);
  }
  return userId === config.ADMIN_ID;
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
function getCategoryName(categoryKey) {
  const category = config.CATEGORIES[categoryKey];
  return typeof category === 'string' ? category : category.name;
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID —Ç–µ–º–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
function getCategoryTopicId(categoryKey) {
  const category = config.CATEGORIES[categoryKey];
  return typeof category === 'object' ? category.topicId : null;
}

// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∞–¥–º—ñ–Ω–∞–º
async function sendToAllAdmins(message, options = {}) {
  const adminIds = config.ADMIN_IDS && Array.isArray(config.ADMIN_IDS) 
    ? config.ADMIN_IDS 
    : [config.ADMIN_ID];
  
  for (const adminId of adminIds) {
    try {
      if (options.photo) {
        await bot.sendPhoto(adminId, options.photo, { caption: message, ...options });
      } else {
        await bot.sendMessage(adminId, message, options);
      }
    } catch (error) {
      console.error(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∞–¥–º—ñ–Ω—É ${adminId}:`, error.message);
    }
  }
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª–∏
async function checkSubscriptions(userId) {
  try {
    const channels = await db.allAsync('SELECT channel_id FROM required_channels');
    
    if (channels.length === 0) {
      return true; // –Ø–∫—â–æ –Ω–µ–º–∞—î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
    }
    
    for (const channel of channels) {
      try {
        const member = await bot.getChatMember(channel.channel_id, userId);
        if (['left', 'kicked'].includes(member.status)) {
          return false;
        }
      } catch (error) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ ${channel.channel_id}:`, error.message);
        return false;
      }
    }
    
    return true;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–æ–∫:', error);
    return true;
  }
}

// –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
function getMainMenu() {
  return {
    reply_markup: {
      keyboard: [
        ['üì¢ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è', 'üíé –ü—Ä–µ–º—ñ—É–º-–ø–æ—Å–ª—É–≥–∏'],
        ['üõí –ú–∞–≥–∞–∑–∏–Ω'],
        ['üì∫ –ù–∞—à—ñ –æ—Ñ—ñ—Ü—ñ–π–Ω—ñ –∫–∞–Ω–∞–ª–∏', '‚ùì –î–æ–ø–æ–º–æ–≥–∞'],
        ['üë®‚Äçüíº –ê–¥–º—ñ–Ω–∏']
      ],
      resize_keyboard: true
    }
  };
}

// –ê–¥–º—ñ–Ω –º–µ–Ω—é
function getAdminMenu() {
  return {
    reply_markup: {
      keyboard: [
        ['üìã –ú–æ–¥–µ—Ä–∞—Ü—ñ—è', 'üì∫ –ö–∞–Ω–∞–ª–∏'],
        ['üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ', 'üìå –ó–∞–∫—Ä—ñ–ø–∏'],
        ['üì® –†–æ–∑—Å–∏–ª–∫–∞', 'üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']
      ],
      resize_keyboard: true
    }
  };
}

// –ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –æ–≥–æ–ª–æ—à–µ–Ω—å
function getCategoriesMenu() {
  const buttons = Object.entries(config.CATEGORIES).map(([key, value]) => [{
    text: getCategoryName(key),
    callback_data: `category_${key}`
  }]);
  
  return {
    reply_markup: {
      inline_keyboard: [...buttons, [{ text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: 'cancel' }]]
    }
  };
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  await addUser(userId, msg.from);
  
  let welcomeText = 'üëã –í—ñ—Ç–∞—î–º–æ –≤ HeartUA Bot!\n\n';
  welcomeText += '–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:';
  
  if (isAdmin(userId)) {
    bot.sendMessage(chatId, welcomeText + '\n\nüîê –í–∏ —É–≤—ñ–π—à–ª–∏ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä', getMainMenu());
  } else {
    bot.sendMessage(chatId, welcomeText, getMainMenu());
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /admin
bot.onText(/\/admin/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  if (isAdmin(userId)) {
    bot.sendMessage(chatId, 'üîê –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:', getAdminMenu());
  } else {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ');
  }
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
bot.on('message', async (msg) => {
  if (msg.text && msg.text.startsWith('/')) return; // –Ü–≥–Ω–æ—Ä—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏
  
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text;
  
  await addUser(userId, msg.from);
  
  // –ü–æ–∫–∞–∑–∞—Ç–∏ ID —Ç–µ–º–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞ (–∫–æ–ª–∏ –ø–µ—Ä–µ—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–º–∏)
  if (isAdmin(userId) && msg.forward_from_message_id && msg.message_thread_id) {
    bot.sendMessage(chatId, `üìå ID —Ç–µ–º–∏ (Topic ID): ${msg.message_thread_id}\n\n–í—Å—Ç–∞–≤—Ç–µ —Ü–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ config.js –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó!`);
    return;
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç–∏ message_thread_id —è–∫—â–æ —î
  if (isAdmin(userId) && msg.message_thread_id) {
    bot.sendMessage(chatId, `üìå Message Thread ID: ${msg.message_thread_id}`);
  }
  
  // –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–≤–∫–ª—é—á–Ω–æ –∑ —Ñ–æ—Ç–æ)
  if (userStates[userId]) {
    await handleUserState(userId, chatId, msg);
    return;
  }
  
  // –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç–µ–∫—Å—Ç—É —ñ –Ω–µ–º–∞—î —Å—Ç–∞–Ω—É - —ñ–≥–Ω–æ—Ä—É—î–º–æ
  if (!text) return;
  
  switch (text) {
    case 'üì¢ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è':
      bot.sendMessage(chatId, 'üì¢ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:', getCategoriesMenu());
      break;
      
    case 'üíé –ü—Ä–µ–º—ñ—É–º-–ø–æ—Å–ª—É–≥–∏':
      showPremiumServices(chatId);
      break;
      
    case 'üõí –ú–∞–≥–∞–∑–∏–Ω':
      showShopMenu(chatId);
      break;
      
    case 'üì∫ –ù–∞—à—ñ –æ—Ñ—ñ—Ü—ñ–π–Ω—ñ –∫–∞–Ω–∞–ª–∏':
      showOfficialChannels(chatId);
      break;
      
    case '‚ùì –î–æ–ø–æ–º–æ–≥–∞':
      showHelp(chatId);
      break;
      
    case 'üë®‚Äçüíº –ê–¥–º—ñ–Ω–∏':
      showAdmins(chatId);
      break;
      
    case 'üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é':
      bot.sendMessage(chatId, '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:', getMainMenu());
      break;
      
    // –ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó
    case 'üìã –ú–æ–¥–µ—Ä–∞—Ü—ñ—è':
      if (isAdmin(userId)) {
        await showModeration(chatId);
      }
      break;
      
    case 'üì∫ –ö–∞–Ω–∞–ª–∏':
      if (isAdmin(userId)) {
        await showChannelsManagement(chatId);
      }
      break;
      
    case 'üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ':
      if (isAdmin(userId)) {
        await showUsers(chatId);
      }
      break;
      
    case 'üìå –ó–∞–∫—Ä—ñ–ø–∏':
      if (isAdmin(userId)) {
        await showPinnedPosts(chatId);
      }
      break;
      
    case 'üì® –†–æ–∑—Å–∏–ª–∫–∞':
      if (isAdmin(userId)) {
        startBroadcast(chatId, userId);
      }
      break;
  }
});

// –û–±—Ä–æ–±–∫–∞ callback query
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const data = query.data;
  
  bot.answerCallbackQuery(query.id);
  
  if (data.startsWith('category_')) {
    const category = data.replace('category_', '');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –≤–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç—É
    if (userStates[userId] && userStates[userId].action === 'premium_service' && userStates[userId].step === 'select_category') {
      userStates[userId].category = category;
      userStates[userId].step = 'create_announcement';
      bot.sendMessage(chatId, `üìù –ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "${getCategoryName(category)}":\n\n(–∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∑ –æ–ø–∏—Å–æ–º)`);
    } else {
      // –ó–≤–∏—á–∞–π–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
      startAnnouncementCreation(userId, chatId, category);
    }
  } else if (data.startsWith('approve_ann_')) {
    const annId = parseInt(data.replace('approve_ann_', ''));
    await approveAnnouncement(chatId, annId);
  } else if (data.startsWith('reject_ann_')) {
    const annId = parseInt(data.replace('reject_ann_', ''));
    await rejectAnnouncement(chatId, annId);
  } else if (data.startsWith('premium_select_')) {
    // –§–æ—Ä–º–∞—Ç: premium_select_autopost_6_123 (service_announcementId)
    const parts = data.replace('premium_select_', '').split('_');
    const announcementId = parts.pop(); // –û—Å—Ç–∞–Ω–Ω—î —á–∏—Å–ª–æ - ID –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
    const service = parts.join('_'); // –ó–∞–ª–∏—à–æ–∫ - –Ω–∞–∑–≤–∞ —Å–µ—Ä–≤—ñ—Å—É
    await confirmPremiumService(userId, chatId, service, parseInt(announcementId));
  } else if (data.startsWith('premium_')) {
    const service = data.replace('premium_', '');
    await startPremiumService(userId, chatId, service);
  } else if (data.startsWith('uc_')) {
    const index = parseInt(data.replace('uc_', ''));
    startUCOrder(userId, chatId, index);
  } else if (data.startsWith('stars_')) {
    const index = parseInt(data.replace('stars_', ''));
    startStarsOrder(userId, chatId, index);
  } else if (data.startsWith('approve_premium_')) {
    const serviceId = parseInt(data.replace('approve_premium_', ''));
    await approvePremiumService(chatId, serviceId);
  } else if (data.startsWith('reject_premium_')) {
    const serviceId = parseInt(data.replace('reject_premium_', ''));
    await rejectPremiumService(chatId, serviceId);
  } else if (data.startsWith('approve_shop_')) {
    const orderId = parseInt(data.replace('approve_shop_', ''));
    await approveShopOrder(chatId, orderId);
  } else if (data.startsWith('reject_shop_')) {
    const orderId = parseInt(data.replace('reject_shop_', ''));
    await rejectShopOrder(chatId, orderId);
  } else if (data === 'shop_uc') {
    showUCShop(chatId);
  } else if (data === 'shop_stars') {
    showStarsShop(chatId);
  } else if (data === 'shop_back') {
    showShopMenu(chatId);
  } else if (data === 'cancel') {
    delete userStates[userId];
    bot.sendMessage(chatId, '‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ', getMainMenu());
  } else if (data.startsWith('add_channel')) {
    startAddChannel(userId, chatId);
  } else if (data.startsWith('remove_channel_')) {
    const channelId = data.replace('remove_channel_', '');
    await removeChannel(chatId, channelId);
  }
});

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
function startAnnouncementCreation(userId, chatId, category) {
  userStates[userId] = {
    action: 'create_announcement',
    category: category,
    step: 'text'
  };
  
  bot.sendMessage(chatId, `üìù –ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "${getCategoryName(category)}":\n\n(–∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∑ –æ–ø–∏—Å–æ–º)`);
}

// –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function handleUserState(userId, chatId, msg) {
  const state = userStates[userId];
  
  if (state.action === 'create_announcement') {
    if (state.step === 'text') {
      const text = msg.caption || msg.text;
      const photo = msg.photo ? msg.photo[msg.photo.length - 1].file_id : null;
      
      if (!text && !photo) {
        bot.sendMessage(chatId, '‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –∞–±–æ —Ñ–æ—Ç–æ –∑ –æ–ø–∏—Å–æ–º');
        return;
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏
      const isSubscribed = await checkSubscriptions(userId);
      
      if (!isSubscribed) {
        const channels = await db.allAsync('SELECT channel_name, channel_id FROM required_channels');
        let message = '‚ö†Ô∏è –î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–∏:\n\n';
        channels.forEach(ch => {
          message += `üì∫ ${ch.channel_name}\n`;
        });
        bot.sendMessage(chatId, message);
        delete userStates[userId];
        return;
      }
      
      // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
      const result = await db.runAsync(`
        INSERT INTO announcements (user_id, category, text, photo, status)
        VALUES (?, ?, ?, ?, 'pending')
      `, [userId, state.category, text, photo]);
      
      bot.sendMessage(chatId, '‚úÖ –í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!\n\n–û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', getMainMenu());
      
      // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
      await notifyAdminNewAnnouncement(result.lastID);
      
      delete userStates[userId];
    }
  } else if (state.action === 'premium_service') {
    if (state.step === 'payment') {
      if (!msg.photo) {
        bot.sendMessage(chatId, '‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó');
        return;
      }
      
      const photo = msg.photo[msg.photo.length - 1].file_id;
      
      const result = await db.runAsync(`
        INSERT INTO premium_services (user_id, service_type, announcement_id, duration, payment_screenshot, status)
        VALUES (?, ?, ?, ?, ?, 'pending')
      `, [userId, state.service, state.announcementId || null, config.PREMIUM_SERVICES[state.service].duration, photo]);
      
      bot.sendMessage(chatId, '‚úÖ –ó–∞–ø–∏—Ç –Ω–∞ –ø—Ä–µ–º—ñ—É–º-–ø–æ—Å–ª—É–≥—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n–û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', getMainMenu());
      
      await notifyAdminNewPremiumService(result.lastID);
      
      delete userStates[userId];
    } else if (state.step === 'select_category') {
      // –í–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç—É –ø—ñ—Å–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
      bot.sendMessage(chatId, 'üì¢ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:', getCategoriesMenu());
    } else if (state.step === 'create_announcement') {
      // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç—É
      const text = msg.caption || msg.text;
      const photo = msg.photo ? msg.photo[msg.photo.length - 1].file_id : null;
      
      if (!text && !photo) {
        bot.sendMessage(chatId, '‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –∞–±–æ —Ñ–æ—Ç–æ –∑ –æ–ø–∏—Å–æ–º');
        return;
      }
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —ñ –æ–¥—Ä–∞–∑—É –∞–∫—Ç–∏–≤—É—î–º–æ –∞–≤—Ç–æ–ø–æ—Å—Ç
      const annResult = await db.runAsync(`
        INSERT INTO announcements (user_id, category, text, photo, status)
        VALUES (?, ?, ?, ?, 'approved')
      `, [userId, state.category, text, photo]);
      
      // –û–Ω–æ–≤–ª—é—î–º–æ premium_service –∑ announcement_id
      await db.runAsync(`
        UPDATE premium_services
        SET announcement_id = ?
        WHERE id = ?
      `, [annResult.lastID, state.premiumServiceId]);
      
      // –ü—É–±–ª—ñ–∫—É—î–º–æ –ø–µ—Ä—à–∏–π —Ä–∞–∑ –æ–¥—Ä–∞–∑—É
      const categoryName = getCategoryName(state.category);
      const topicId = getCategoryTopicId(state.category);
      const publishChannel = config.ANNOUNCEMENTS_CHANNEL || chatId;
      
      const options = {};
      if (topicId) options.message_thread_id = topicId;
      
      try {
        if (photo) {
          await bot.sendPhoto(publishChannel, photo, {
            caption: `üîÑ ${categoryName}\n\n${text || ''}`,
            ...options
          });
        } else {
          await bot.sendMessage(publishChannel, `üîÑ ${categoryName}\n\n${text}`, options);
        }
        
        bot.sendMessage(chatId, `‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç –∑–∞–ø—É—â–µ–Ω–æ!\n\nüì¢ –í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –±—É–¥–µ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏—Å—å –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É –ø—Ä–æ—Ç—è–≥–æ–º ${config.PREMIUM_SERVICES[state.service].duration} –≥–æ–¥–∏–Ω.`, getMainMenu());
      } catch (error) {
        bot.sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', getMainMenu());
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –∞–≤—Ç–æ–ø–æ—Å—Ç—É:', error);
      }
      
      delete userStates[userId];
    }
  } else if (state.action === 'shop_order') {
    if (state.step === 'game_id') {
      state.gameId = msg.text;
      state.step = 'payment';
      bot.sendMessage(chatId, config.PAYMENT_INFO + '\n\nüì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –æ–ø–ª–∞—Ç–∏:');
    } else if (state.step === 'payment') {
      if (!msg.photo) {
        bot.sendMessage(chatId, '‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó');
        return;
      }
      
      const photo = msg.photo[msg.photo.length - 1].file_id;
      
      const result = await db.runAsync(`
        INSERT INTO shop_orders (user_id, product_type, amount, price, game_id, payment_screenshot, status)
        VALUES (?, ?, ?, ?, ?, ?, 'pending')
      `, [userId, state.productType, state.amount, state.price, state.gameId, photo]);
      
      bot.sendMessage(chatId, '‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n–û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', getMainMenu());
      
      await notifyAdminNewShopOrder(result.lastID);
      
      delete userStates[userId];
    }
  } else if (state.action === 'broadcast') {
    const message = msg.text;
    const users = await db.allAsync('SELECT id FROM users');
    
    let successCount = 0;
    let failCount = 0;
    
    for (const user of users) {
      try {
        await bot.sendMessage(user.id, message);
        successCount++;
        await new Promise(resolve => setTimeout(resolve, 50)); // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
      } catch (error) {
        failCount++;
      }
    }
    
    bot.sendMessage(chatId, `üì® –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n‚úÖ –£—Å–ø—ñ—à–Ω–æ: ${successCount}\n‚ùå –ü–æ–º–∏–ª–æ–∫: ${failCount}`, getAdminMenu());
    delete userStates[userId];
  } else if (state.action === 'add_channel') {
    const channelInfo = msg.text;
    
    try {
      const chat = await bot.getChat(channelInfo);
      
      await db.runAsync(`
        INSERT OR IGNORE INTO required_channels (channel_id, channel_name)
        VALUES (?, ?)
      `, [channelInfo, chat.title || channelInfo]);
      
      bot.sendMessage(chatId, `‚úÖ –ö–∞–Ω–∞–ª "${chat.title || channelInfo}" –¥–æ–¥–∞–Ω–æ –¥–æ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö!`, getAdminMenu());
    } catch (error) {
      bot.sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å ID –∞–±–æ username –∫–∞–Ω–∞–ª—É.\n\n–ü—Ä–∏–∫–ª–∞–¥: @channelname –∞–±–æ -100123456789', getAdminMenu());
    }
    
    delete userStates[userId];
  }
}

// –ü—Ä–µ–º—ñ—É–º –ø–æ—Å–ª—É–≥–∏
function showPremiumServices(chatId) {
  const buttons = Object.entries(config.PREMIUM_SERVICES).map(([key, value]) => [{
    text: `${value.name} - ${value.price} –≥—Ä–Ω`,
    callback_data: `premium_${key}`
  }]);
  
  bot.sendMessage(chatId, 'üíé –ü—Ä–µ–º—ñ—É–º-–ø–æ—Å–ª—É–≥–∏:', {
    reply_markup: {
      inline_keyboard: [...buttons, [{ text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: 'cancel' }]]
    }
  });
}

// –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–µ–º–∏—É–º-–ø–æ—Å–ª—É–≥–∏ –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
async function confirmPremiumService(userId, chatId, service, announcementId) {
  const serviceInfo = config.PREMIUM_SERVICES[service];
  
  userStates[userId] = {
    action: 'premium_service',
    service: service,
    announcementId: announcementId,
    step: 'payment'
  };
  
  bot.sendMessage(chatId, `üíé ${serviceInfo.name}\nüí∞ –¶—ñ–Ω–∞: ${serviceInfo.price} –≥—Ä–Ω\n\n${config.PAYMENT_INFO}\n\nüì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –æ–ø–ª–∞—Ç–∏:`);
}

async function startPremiumService(userId, chatId, service) {
  const serviceInfo = config.PREMIUM_SERVICES[service];
  
  if (service.startsWith('pin_')) {
    // –î–ª—è –∑–∞–∫—Ä—ñ–ø—É - –ø–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –æ–≥–æ–ª–æ—à–µ–Ω—å
    const pinnedCount = await db.getAsync(`
      SELECT COUNT(*) as count FROM pinned_posts
      WHERE datetime(expires_at) > datetime('now')
    `);
    
    if (pinnedCount && pinnedCount.count >= config.MAX_PINNED_POSTS) {
      const nextFree = await db.getAsync(`
        SELECT datetime(expires_at) as expires FROM pinned_posts
        WHERE datetime(expires_at) > datetime('now')
        ORDER BY expires_at ASC LIMIT 1
      `);
      
      bot.sendMessage(chatId, `‚ö†Ô∏è –ó–∞–π–Ω—è—Ç–æ!\n\n–í—Å—ñ –º—ñ—Å—Ü—è –¥–ª—è –∑–∞–∫—Ä—ñ–ø—É –∑–∞–π–Ω—è—Ç—ñ.\n\nüïê –ù–∞—Å—Ç—É–ø–Ω–µ –º—ñ—Å—Ü–µ –∑–≤—ñ–ª—å–Ω–∏—Ç—å—Å—è: ${nextFree.expires}`);
      return;
    }
    
    // –î–ª—è –∑–∞–∫—Ä—ñ–ø—É –æ—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –æ–≥–æ–ª–æ—à–µ–Ω—å
    const announcements = await db.allAsync(`
      SELECT id, category, text, created_at
      FROM announcements
      WHERE user_id = ? AND status = 'approved'
      ORDER BY created_at DESC
      LIMIT 10
    `, [userId]);
    
    if (announcements.length === 0) {
      bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –æ–¥–æ–±—Ä–µ–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å!\n\n–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —ñ –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—å –π–æ–≥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.', getMainMenu());
      return;
    }
    
    // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –æ–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è –≤–∏–±–æ—Ä—É
    const buttons = announcements.map(ann => {
      const categoryName = getCategoryName(ann.category);
      const shortText = ann.text ? ann.text.substring(0, 30) + (ann.text.length > 30 ? '...' : '') : '–ë–µ–∑ —Ç–µ–∫—Å—Ç—É';
      return [{
        text: `${categoryName}: ${shortText}`,
        callback_data: `premium_select_${service}_${ann.id}`
      }];
    });
    
    bot.sendMessage(chatId, `üíé ${serviceInfo.name}\nüí∞ –¶—ñ–Ω–∞: ${serviceInfo.price} –≥—Ä–Ω\n\nüì¢ –û–±–µ—Ä—ñ—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ü—è –ø–æ—Å–ª—É–≥–∞:`, {
      reply_markup: {
        inline_keyboard: [...buttons, [{ text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: 'cancel' }]]
      }
    });
  } else {
    // –î–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç—É - –æ–¥—Ä–∞–∑—É –æ–ø–ª–∞—Ç–∞, –ø–æ—Ç—ñ–º —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
    userStates[userId] = {
      action: 'premium_service',
      service: service,
      step: 'payment'
    };
    
    bot.sendMessage(chatId, `üíé ${serviceInfo.name}\nüí∞ –¶—ñ–Ω–∞: ${serviceInfo.price} –≥—Ä–Ω\n\n${config.PAYMENT_INFO}\n\nüì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –æ–ø–ª–∞—Ç–∏:`);
  }
}

// –ú–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω—É
function showShopMenu(chatId) {
  bot.sendMessage(chatId, 'üõí –ú–∞–≥–∞–∑–∏–Ω:\n\n–û–±–µ—Ä—ñ—Ç—å —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üéÆ UC (PUBG Mobile)', callback_data: 'shop_uc' }],
        [{ text: '‚≠ê Telegram Stars', callback_data: 'shop_stars' }],
        [{ text: 'üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: 'cancel' }]
      ]
    }
  });
}

// –ú–∞–≥–∞–∑–∏–Ω UC
function showUCShop(chatId) {
  const buttons = config.UC_PACKAGES.map((pkg, index) => [{
    text: `${pkg.amount} UC - ${pkg.price} –≥—Ä–Ω`,
    callback_data: `uc_${index}`
  }]);
  
  bot.sendMessage(chatId, 'üõí –ú–∞–≥–∞–∑–∏–Ω UC:', {
    reply_markup: {
      inline_keyboard: [...buttons, [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'shop_back' }]]
    }
  });
}

function startUCOrder(userId, chatId, index) {
  const pkg = config.UC_PACKAGES[index];
  
  userStates[userId] = {
    action: 'shop_order',
    productType: 'uc',
    amount: pkg.amount,
    price: pkg.price,
    step: 'game_id'
  };
  
  bot.sendMessage(chatId, `üéÆ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${pkg.amount} UC –∑–∞ ${pkg.price} –≥—Ä–Ω\n\nüìù –í–≤–µ–¥—ñ—Ç—å –≤–∞—à —ñ–≥—Ä–æ–≤–∏–π ID –∞–±–æ –Ω—ñ–∫:`);
}

// –ú–∞–≥–∞–∑–∏–Ω Stars
function showStarsShop(chatId) {
  const buttons = config.STARS_PACKAGES.map((pkg, index) => [{
    text: `‚≠ê ${pkg.amount} - ${pkg.price} –≥—Ä–Ω`,
    callback_data: `stars_${index}`
  }]);
  
  bot.sendMessage(chatId, '‚≠ê –ú–∞–≥–∞–∑–∏–Ω Telegram Stars:', {
    reply_markup: {
      inline_keyboard: [...buttons, [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'shop_back' }]]
    }
  });
}

// –û—Ñ—ñ—Ü—ñ–π–Ω—ñ –∫–∞–Ω–∞–ª–∏
function showOfficialChannels(chatId) {
  const message = 'üì∫ –ù–∞—à—ñ –æ—Ñ—ñ—Ü—ñ–π–Ω—ñ –∫–∞–Ω–∞–ª–∏:\n\n' +
    'üîπ https://t.me/HeartUA_official\n' +
    'üîπ https://t.me/HeartUkrainePUBG\n\n' +
    'üì¢ –ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏!';
  
  bot.sendMessage(chatId, message, {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üì¢ HeartUA Official', url: 'https://t.me/HeartUA_official' }],
        [{ text: 'üéÆ Heart of Ukraine PUBG', url: 'https://t.me/HeartUkrainePUBG' }]
      ]
    }
  });
}

function startStarsOrder(userId, chatId, index) {
  const pkg = config.STARS_PACKAGES[index];
  
  userStates[userId] = {
    action: 'shop_order',
    productType: 'stars',
    amount: pkg.amount,
    price: pkg.price,
    step: 'game_id'
  };
  
  bot.sendMessage(chatId, `‚≠ê –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${pkg.amount} Stars –∑–∞ ${pkg.price} –≥—Ä–Ω\n\nüìù –í–≤–µ–¥—ñ—Ç—å –≤–∞—à —ñ–≥—Ä–æ–≤–∏–π ID –∞–±–æ –Ω—ñ–∫:`);
}

// –î–æ–ø–æ–º–æ–≥–∞
function showHelp(chatId) {
  let message = '‚ùì –î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É:\n\n';
  message += 'üì¢ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω—å\n';
  message += 'üíé –ü—Ä–µ–º—ñ—É–º-–ø–æ—Å–ª—É–≥–∏ - –∞–≤—Ç–æ–ø–æ—Å—Ç —Ç–∞ –∑–∞–∫—Ä—ñ–ø\n';
  message += 'üõí –ú–∞–≥–∞–∑–∏–Ω - –ø–æ–∫—É–ø–∫–∞ UC —Ç–∞ Stars\n';
  message += 'üë®‚Äçüíº –ê–¥–º—ñ–Ω–∏ - –∫–æ–Ω—Ç–∞–∫—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó\n\n';
  message += 'üí¨ –ó –ø–∏—Ç–∞–Ω—å –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤!';
  
  bot.sendMessage(chatId, message);
}

// –ê–¥–º—ñ–Ω–∏
function showAdmins(chatId) {
  let message = 'üë®‚Äçüíº –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è:\n\n';
  
  if (config.ADMIN_IDS && Array.isArray(config.ADMIN_IDS)) {
    config.ADMIN_IDS.forEach((adminId, index) => {
      message += `üîπ –ê–¥–º—ñ–Ω ${index + 1}: ${adminId}\n`;
    });
  } else {
    message += `üîπ ID: ${config.ADMIN_ID}\n`;
  }
  
  message += '\nüí¨ –ó –ø–∏—Ç–∞–Ω—å –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤!';
  
  bot.sendMessage(chatId, message);
}

// –ú–æ–¥–µ—Ä–∞—Ü—ñ—è
async function showModeration(chatId) {
  const announcements = await db.allAsync(`
    SELECT a.*, u.username, u.first_name
    FROM announcements a
    LEFT JOIN users u ON a.user_id = u.id
    WHERE a.status = 'pending'
    ORDER BY a.created_at DESC
    LIMIT 10
  `);
  
  const premiumServices = await db.allAsync(`
    SELECT ps.*, u.username, u.first_name
    FROM premium_services ps
    LEFT JOIN users u ON ps.user_id = u.id
    WHERE ps.status = 'pending'
    ORDER BY ps.created_at DESC
    LIMIT 5
  `);
  
  const shopOrders = await db.allAsync(`
    SELECT so.*, u.username, u.first_name
    FROM shop_orders so
    LEFT JOIN users u ON so.user_id = u.id
    WHERE so.status = 'pending'
    ORDER BY so.created_at DESC
    LIMIT 5
  `);
  
  if (announcements.length === 0 && premiumServices.length === 0 && shopOrders.length === 0) {
    bot.sendMessage(chatId, '‚úÖ –ù–µ–º–∞—î –∑–∞—è–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!', getAdminMenu());
    return;
  }
  
  bot.sendMessage(chatId, `üìã –ó–∞—è–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é:\n\nüì¢ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è: ${announcements.length}\nüíé –ü—Ä–µ–º—ñ—É–º: ${premiumServices.length}\nüõí –ú–∞–≥–∞–∑–∏–Ω: ${shopOrders.length}`);
  
  // –ü–æ–∫–∞–∑ –æ–≥–æ–ª–æ—à–µ–Ω—å
  for (const ann of announcements) {
    const username = ann.username ? `@${ann.username}` : ann.first_name;
    const category = getCategoryName(ann.category);
    
    const buttons = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data: `approve_ann_${ann.id}` },
            { text: '‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏', callback_data: `reject_ann_${ann.id}` }
          ]
        ]
      }
    };
    
    if (ann.photo) {
      await bot.sendPhoto(chatId, ann.photo, {
        caption: `üì¢ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è #${ann.id}\nüë§ –í—ñ–¥: ${username}\nüìÅ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${category}\n\n${ann.text || ''}`,
        ...buttons
      });
    } else {
      await bot.sendMessage(chatId, `üì¢ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è #${ann.id}\nüë§ –í—ñ–¥: ${username}\nüìÅ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${category}\n\n${ann.text}`, buttons);
    }
  }
  
  // –ü–æ–∫–∞–∑ –ø—Ä–µ–º—ñ—É–º-–ø–æ—Å–ª—É–≥
  for (const service of premiumServices) {
    const username = service.username ? `@${service.username}` : service.first_name;
    const serviceInfo = config.PREMIUM_SERVICES[service.service_type];
    
    const buttons = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data: `approve_premium_${service.id}` },
            { text: '‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏', callback_data: `reject_premium_${service.id}` }
          ]
        ]
      }
    };
    
    await bot.sendPhoto(chatId, service.payment_screenshot, {
      caption: `üíé –ü—Ä–µ–º—ñ—É–º-–ø–æ—Å–ª—É–≥–∞ #${service.id}\nüë§ –í—ñ–¥: ${username}\nüìã –ü–æ—Å–ª—É–≥–∞: ${serviceInfo.name}\nüí∞ –¶—ñ–Ω–∞: ${serviceInfo.price} –≥—Ä–Ω`,
      ...buttons
    });
  }
  
  // –ü–æ–∫–∞–∑ –∑–∞–º–æ–≤–ª–µ–Ω—å –º–∞–≥–∞–∑–∏–Ω—É
  for (const order of shopOrders) {
    const username = order.username ? `@${order.username}` : order.first_name;
    const productName = order.product_type === 'uc' ? 'UC' : 'Stars';
    
    const buttons = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data: `approve_shop_${order.id}` },
            { text: '‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏', callback_data: `reject_shop_${order.id}` }
          ]
        ]
      }
    };
    
    await bot.sendPhoto(chatId, order.payment_screenshot, {
      caption: `üõí –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #${order.id}\nüë§ –í—ñ–¥: ${username}\nüì¶ –¢–æ–≤–∞—Ä: ${order.amount} ${productName}\nüí∞ –¶—ñ–Ω–∞: ${order.price} –≥—Ä–Ω\nüéÆ ID/–ù—ñ–∫: ${order.game_id}`,
      ...buttons
    });
  }
}

// –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
async function approveAnnouncement(chatId, annId) {
  const ann = await db.getAsync('SELECT * FROM announcements WHERE id = ?', [annId]);
  
  if (!ann) {
    bot.sendMessage(chatId, '‚ùå –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
    return;
  }
  
  await db.runAsync(`
    UPDATE announcements
    SET status = 'approved', published_at = datetime('now')
    WHERE id = ?
  `, [annId]);
  
  const categoryName = getCategoryName(ann.category);
  const topicId = getCategoryTopicId(ann.category);
  
  // –ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó (–∫–∞–Ω–∞–ª –∞–±–æ —á–∞—Ç –∑ –∞–¥–º—ñ–Ω–æ–º)
  const publishChannel = config.ANNOUNCEMENTS_CHANNEL || chatId;
  
  // –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è
  try {
    const options = {};
    
    // –Ø–∫—â–æ —î topic ID, –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ (–¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø –∑ —Ç–µ–º–∞–º–∏)
    if (topicId) {
      options.message_thread_id = topicId;
    }
    
    if (ann.photo) {
      await bot.sendPhoto(publishChannel, ann.photo, {
        caption: `${categoryName}\n\n${ann.text || ''}`,
        ...options
      });
    } else {
      await bot.sendMessage(publishChannel, `${categoryName}\n\n${ann.text}`, options);
    }
    
    // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    const channelLink = config.ANNOUNCEMENTS_CHANNEL 
      ? (config.ANNOUNCEMENTS_CHANNEL.startsWith('@') 
        ? `https://t.me/${config.ANNOUNCEMENTS_CHANNEL.slice(1)}` 
        : '–≤ –∫–∞–Ω–∞–ª')
      : '–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É';
    
    bot.sendMessage(ann.user_id, `‚úÖ –í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!\n\nüì¢ –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ: ${channelLink}`);
    bot.sendMessage(chatId, `‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è #${annId} –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª!`);
  } catch (error) {
    bot.sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: ' + error.message);
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:', error);
  }
}

// –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
async function rejectAnnouncement(chatId, annId) {
  const ann = await db.getAsync('SELECT * FROM announcements WHERE id = ?', [annId]);
  
  if (!ann) {
    bot.sendMessage(chatId, '‚ùå –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
    return;
  }
  
  await db.runAsync('UPDATE announcements SET status = ? WHERE id = ?', ['rejected', annId]);
  
  bot.sendMessage(ann.user_id, '‚ùå –í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.');
  bot.sendMessage(chatId, `‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è #${annId} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ!`);
}

// –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–µ–º—ñ—É–º-–ø–æ—Å–ª—É–≥–∏
async function approvePremiumService(chatId, serviceId) {
  const service = await db.getAsync('SELECT * FROM premium_services WHERE id = ?', [serviceId]);
  
  if (!service) {
    bot.sendMessage(chatId, '‚ùå –ü–æ—Å–ª—É–≥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
    return;
  }
  
  const serviceInfo = config.PREMIUM_SERVICES[service.service_type];
  const expiresAt = new Date(Date.now() + serviceInfo.duration * 60 * 60 * 1000).toISOString();
  
  await db.runAsync(`
    UPDATE premium_services
    SET status = 'approved', approved_at = datetime('now'), expires_at = ?
    WHERE id = ?
  `, [expiresAt, serviceId]);
  
  // –Ø–∫—â–æ —Ü–µ –∑–∞–∫—Ä—ñ–ø - –¥–æ–¥–∞—î–º–æ –≤ pinned_posts
  if (service.service_type.startsWith('pin_')) {
    await db.runAsync(`
      INSERT INTO pinned_posts (announcement_id, user_id, expires_at)
      VALUES (?, ?, ?)
    `, [service.announcement_id || null, service.user_id, expiresAt]);
    
    bot.sendMessage(service.user_id, '‚úÖ –í–∞—à—É –ø—Ä–µ–º—ñ—É–º-–ø–æ—Å–ª—É–≥—É –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!');
  }
  
  // –Ø–∫—â–æ —Ü–µ –∞–≤—Ç–æ–ø–æ—Å—Ç - –ø—Ä–æ–ø–æ–Ω—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
  if (service.service_type.startsWith('autopost_')) {
    // –î–æ–¥–∞—î–º–æ –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–ø–æ—Å—Ç—É (—Å–ø–æ—á–∞—Ç–∫—É –±–µ–∑ announcement_id)
    await db.runAsync(`
      INSERT INTO autopost_tasks (announcement_id, user_id, duration, expires_at, status)
      VALUES (?, ?, ?, ?, 'pending')
    `, [null, service.user_id, serviceInfo.duration, expiresAt]);
    
    // –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
    userStates[service.user_id] = {
      action: 'premium_service',
      service: service.service_type,
      premiumServiceId: serviceId,
      step: 'select_category'
    };
    
    bot.sendMessage(service.user_id, `‚úÖ –ü–æ—Å–ª—É–≥—É "${serviceInfo.name}" –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!\n\nüì¢ –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–∞ –Ω–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, —è–∫–µ –±—É–¥–µ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏—Å—å –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É:`, getCategoriesMenu());
  }
  
  bot.sendMessage(chatId, `‚úÖ –ü—Ä–µ–º—ñ—É–º-–ø–æ—Å–ª—É–≥—É #${serviceId} –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!`);
}

// –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –ø—Ä–µ–º—ñ—É–º-–ø–æ—Å–ª—É–≥–∏
async function rejectPremiumService(chatId, serviceId) {
  const service = await db.getAsync('SELECT * FROM premium_services WHERE id = ?', [serviceId]);
  
  if (!service) {
    bot.sendMessage(chatId, '‚ùå –ü–æ—Å–ª—É–≥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
    return;
  }
  
  await db.runAsync('UPDATE premium_services SET status = ? WHERE id = ?', ['rejected', serviceId]);
  
  bot.sendMessage(service.user_id, '‚ùå –í–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–µ–º—ñ—É–º-–ø–æ—Å–ª—É–≥—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.');
  bot.sendMessage(chatId, `‚úÖ –ü—Ä–µ–º—ñ—É–º-–ø–æ—Å–ª—É–≥—É #${serviceId} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ!`);
}

// –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –º–∞–≥–∞–∑–∏–Ω—ñ
async function approveShopOrder(chatId, orderId) {
  const order = await db.getAsync('SELECT * FROM shop_orders WHERE id = ?', [orderId]);
  
  if (!order) {
    bot.sendMessage(chatId, '‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
    return;
  }
  
  await db.runAsync(`
    UPDATE shop_orders
    SET status = 'completed', completed_at = datetime('now')
    WHERE id = ?
  `, [orderId]);
  
  bot.sendMessage(order.user_id, '‚úÖ –ü–æ—Å–ª—É–≥—É –≤–∏–∫–æ–Ω–∞–Ω–æ!\n\n–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ.');
  bot.sendMessage(chatId, `‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #${orderId} –≤–∏–∫–æ–Ω–∞–Ω–æ!`);
}

// –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –º–∞–≥–∞–∑–∏–Ω—ñ
async function rejectShopOrder(chatId, orderId) {
  const order = await db.getAsync('SELECT * FROM shop_orders WHERE id = ?', [orderId]);
  
  if (!order) {
    bot.sendMessage(chatId, '‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
    return;
  }
  
  await db.runAsync('UPDATE shop_orders SET status = ? WHERE id = ?', ['rejected', orderId]);
  
  bot.sendMessage(order.user_id, '‚ùå –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.');
  bot.sendMessage(chatId, `‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #${orderId} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ!`);
}

// –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏
async function showChannelsManagement(chatId) {
  const channels = await db.allAsync('SELECT * FROM required_channels');
  
  if (channels.length === 0) {
    bot.sendMessage(chatId, 'üì∫ –û–±–æ–≤\'—è–∑–∫–æ–≤–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ –Ω–µ–º–∞—î.\n\n–î–æ–¥–∞–π—Ç–µ –∫–∞–Ω–∞–ª:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª', callback_data: 'add_channel' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'cancel' }]
        ]
      }
    });
    return;
  }
  
  let message = 'üì∫ –û–±–æ–≤\'—è–∑–∫–æ–≤—ñ –∫–∞–Ω–∞–ª–∏:\n\n';
  const buttons = [];
  
  channels.forEach(ch => {
    message += `‚Ä¢ ${ch.channel_name} (${ch.channel_id})\n`;
    buttons.push([{ text: `üóëÔ∏è ${ch.channel_name}`, callback_data: `remove_channel_${ch.channel_id}` }]);
  });
  
  buttons.push([{ text: '‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª', callback_data: 'add_channel' }]);
  buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'cancel' }]);
  
  bot.sendMessage(chatId, message, {
    reply_markup: {
      inline_keyboard: buttons
    }
  });
}

function startAddChannel(userId, chatId) {
  userStates[userId] = {
    action: 'add_channel'
  };
  
  bot.sendMessage(chatId, 'üì∫ –ù–∞–¥—ñ—à–ª—ñ—Ç—å ID –∞–±–æ username –∫–∞–Ω–∞–ª—É:\n\n–ü—Ä–∏–∫–ª–∞–¥: @channelname –∞–±–æ -100123456789');
}

async function removeChannel(chatId, channelId) {
  await db.runAsync('DELETE FROM required_channels WHERE channel_id = ?', [channelId]);
  
  bot.sendMessage(chatId, '‚úÖ –ö–∞–Ω–∞–ª –≤–∏–¥–∞–ª–µ–Ω–æ!');
  await showChannelsManagement(chatId);
}

// –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
async function showUsers(chatId) {
  const users = await db.allAsync('SELECT * FROM users ORDER BY joined_at DESC LIMIT 20');
  
  let message = 'üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ (–æ—Å—Ç–∞–Ω–Ω—ñ 20):\n\n';
  
  users.forEach((user, index) => {
    const username = user.username ? `@${user.username}` : user.first_name;
    message += `${index + 1}. ${username} (ID: ${user.id})\n`;
  });
  
  const totalUsers = await db.getAsync('SELECT COUNT(*) as count FROM users');
  message += `\nüìä –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${totalUsers.count}`;
  
  bot.sendMessage(chatId, message, getAdminMenu());
}

// –ó–∞–∫—Ä—ñ–ø–∏
async function showPinnedPosts(chatId) {
  const pinned = await db.allAsync(`
    SELECT pp.*, u.username, u.first_name
    FROM pinned_posts pp
    LEFT JOIN users u ON pp.user_id = u.id
    WHERE datetime(pp.expires_at) > datetime('now')
    ORDER BY pp.created_at DESC
  `);
  
  if (pinned.length === 0) {
    bot.sendMessage(chatId, 'üìå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–∫—Ä—ñ–ø—ñ–≤.\n\n' + 
      `–î–æ—Å—Ç—É–ø–Ω–æ –º—ñ—Å—Ü—å: ${config.MAX_PINNED_POSTS}/${config.MAX_PINNED_POSTS}`, getAdminMenu());
    return;
  }
  
  let message = `üìå –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–∫—Ä—ñ–ø–∏ (${pinned.length}/${config.MAX_PINNED_POSTS}):\n\n`;
  
  pinned.forEach((pin, index) => {
    const username = pin.username ? `@${pin.username}` : pin.first_name;
    const expiresAt = new Date(pin.expires_at);
    message += `${index + 1}. ${username}\n`;
    message += `   –ó–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è: ${expiresAt.toLocaleString('uk-UA')}\n\n`;
  });
  
  bot.sendMessage(chatId, message, getAdminMenu());
}

// –†–æ–∑—Å–∏–ª–∫–∞
function startBroadcast(chatId, userId) {
  userStates[userId] = {
    action: 'broadcast'
  };
  
  bot.sendMessage(chatId, 'üì® –ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ —É—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:');
}

// –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ –Ω–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
async function notifyAdminNewAnnouncement(annId) {
  const ann = await db.getAsync(`
    SELECT a.*, u.username, u.first_name
    FROM announcements a
    LEFT JOIN users u ON a.user_id = u.id
    WHERE a.id = ?
  `, [annId]);
  
  if (!ann) return;
  
  const username = ann.username ? `@${ann.username}` : ann.first_name;
  const category = getCategoryName(ann.category);
  
  const buttons = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data: `approve_ann_${ann.id}` },
          { text: '‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏', callback_data: `reject_ann_${ann.id}` }
        ]
      ]
    }
  };
  
  const message = `üîî –ù–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è #${ann.id}\nüë§ –í—ñ–¥: ${username}\nüìÅ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${category}\n\n${ann.text || ''}`;
  
  if (ann.photo) {
    await sendToAllAdmins(message, { photo: ann.photo, ...buttons });
  } else {
    await sendToAllAdmins(message, buttons);
  }
}

// –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ –Ω–æ–≤—É –ø—Ä–µ–º—ñ—É–º-–ø–æ—Å–ª—É–≥—É
async function notifyAdminNewPremiumService(serviceId) {
  const service = await db.getAsync(`
    SELECT ps.*, u.username, u.first_name, a.text as ann_text, a.category
    FROM premium_services ps
    LEFT JOIN users u ON ps.user_id = u.id
    LEFT JOIN announcements a ON ps.announcement_id = a.id
    WHERE ps.id = ?
  `, [serviceId]);
  
  if (!service) return;
  
  const username = service.username ? `@${service.username}` : service.first_name;
  const serviceInfo = config.PREMIUM_SERVICES[service.service_type];
  
  const buttons = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data: `approve_premium_${service.id}` },
          { text: '‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏', callback_data: `reject_premium_${service.id}` }
        ]
      ]
    }
  };
  
  let message = `üîî –ù–æ–≤–∞ –ø—Ä–µ–º—ñ—É–º-–ø–æ—Å–ª—É–≥–∞ #${service.id}\nüë§ –í—ñ–¥: ${username}\nüìã –ü–æ—Å–ª—É–≥–∞: ${serviceInfo.name}\nüí∞ –¶—ñ–Ω–∞: ${serviceInfo.price} –≥—Ä–Ω`;
  
  // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ –ø—Ä–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
  if (service.announcement_id && service.ann_text) {
    const categoryName = getCategoryName(service.category);
    const shortText = service.ann_text.substring(0, 50) + (service.ann_text.length > 50 ? '...' : '');
    message += `\n\nüì¢ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è:\n${categoryName}: ${shortText}`;
  }
  
  await sendToAllAdmins(message, { photo: service.payment_screenshot, ...buttons });
}

// –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
async function notifyAdminNewShopOrder(orderId) {
  const order = await db.getAsync(`
    SELECT so.*, u.username, u.first_name
    FROM shop_orders so
    LEFT JOIN users u ON so.user_id = u.id
    WHERE so.id = ?
  `, [orderId]);
  
  if (!order) return;
  
  const username = order.username ? `@${order.username}` : order.first_name;
  const productName = order.product_type === 'uc' ? 'UC' : 'Stars';
  
  const buttons = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data: `approve_shop_${order.id}` },
          { text: '‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏', callback_data: `reject_shop_${order.id}` }
        ]
      ]
    }
  };
  
  const message = `üîî –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #${order.id}\nüë§ –í—ñ–¥: ${username}\nüì¶ –¢–æ–≤–∞—Ä: ${order.amount} ${productName}\nüí∞ –¶—ñ–Ω–∞: ${order.price} –≥—Ä–Ω\nüéÆ ID/–ù—ñ–∫: ${order.game_id}`;
  await sendToAllAdmins(message, { photo: order.payment_screenshot, ...buttons });
}

// Cron –∑–∞–¥–∞—á—ñ
// –ê–≤—Ç–æ–ø–æ—Å—Ç–∏ (–∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É)
cron.schedule('0 * * * *', async () => {
  const tasks = await db.allAsync(`
    SELECT at.*, a.text, a.photo, a.category
    FROM autopost_tasks at
    LEFT JOIN announcements a ON at.announcement_id = a.id
    WHERE at.status = 'active' AND datetime(at.expires_at) > datetime('now')
  `);
  
  for (const task of tasks) {
    try {
      const category = getCategoryName(task.category);
      const topicId = getCategoryTopicId(task.category);
      const publishChannel = config.ANNOUNCEMENTS_CHANNEL || config.ADMIN_ID;
      
      const options = {};
      if (topicId) options.message_thread_id = topicId;
      
      if (task.photo) {
        await bot.sendPhoto(publishChannel, task.photo, {
          caption: `üîÑ –ê–≤—Ç–æ–ø–æ—Å—Ç\n${category}\n\n${task.text || ''}`,
          ...options
        });
      } else {
        await bot.sendMessage(publishChannel, `üîÑ –ê–≤—Ç–æ–ø–æ—Å—Ç\n${category}\n\n${task.text}`, options);
      }
      
      // –û–Ω–æ–≤–ª—é—î–º–æ last_posted
      await db.runAsync('UPDATE autopost_tasks SET last_posted = datetime(?) WHERE id = ?', ['now', task.id]);
    } catch (error) {
      console.error(`–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç—É #${task.id}:`, error.message);
    }
  }
});

// –û—á–∏—â–µ–Ω–Ω—è –∑–∞–∫—ñ–Ω—á–µ–Ω–∏—Ö –∑–∞–∫—Ä—ñ–ø—ñ–≤
cron.schedule('*/30 * * * *', async () => {
  await db.runAsync(`
    UPDATE pinned_posts
    SET status = 'expired'
    WHERE datetime(expires_at) <= datetime('now') AND status != 'expired'
  `);
});

// –û—á–∏—â–µ–Ω–Ω—è –∑–∞–∫—ñ–Ω—á–µ–Ω–∏—Ö –∞–≤—Ç–æ–ø–æ—Å—Ç—ñ–≤ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω—å
cron.schedule('*/5 * * * *', async () => {
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏ —â–æ –∑–∞–∫—ñ–Ω—á—É—é—Ç—å—Å—è —á–µ—Ä–µ–∑ 1 –≥–æ–¥–∏–Ω—É
  const endingSoon = await db.allAsync(`
    SELECT at.*, ps.user_id
    FROM autopost_tasks at
    LEFT JOIN premium_services ps ON ps.announcement_id = at.announcement_id
    WHERE at.status = 'active' 
    AND datetime(at.expires_at) BETWEEN datetime('now', '+55 minutes') AND datetime('now', '+65 minutes')
    AND (at.notified_ending IS NULL OR at.notified_ending = 0)
  `);
  
  for (const task of endingSoon) {
    if (!task.user_id) continue;
    try {
      await bot.sendMessage(task.user_id, '‚è∞ –í–∞—à –∞–≤—Ç–æ–ø–æ—Å—Ç –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ 1 –≥–æ–¥–∏–Ω—É!\n\n–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –∑–∞–º–æ–≤—Ç–µ –Ω–æ–≤—É –ø–æ—Å–ª—É–≥—É.');
      await db.runAsync('UPDATE autopost_tasks SET notified_ending = 1 WHERE id = ?', [task.id]);
    } catch (error) {
      console.error(`–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—è ${task.user_id}:`, error.message);
    }
  }
  
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏ —â–æ –ø—É–±–ª—ñ–∫—É—é—Ç—å—Å—è –≤–æ—Å—Ç–∞–Ω–Ω—î (–∑–∞ 5 —Ö–≤–∏–ª–∏–Ω)
  const lastPost = await db.allAsync(`
    SELECT at.*, ps.user_id
    FROM autopost_tasks at
    LEFT JOIN premium_services ps ON ps.announcement_id = at.announcement_id
    WHERE at.status = 'active'
    AND datetime(at.expires_at) BETWEEN datetime('now', '+5 minutes') AND datetime('now', '+10 minutes')
    AND (at.notified_last IS NULL OR at.notified_last = 0)
  `);
  
  for (const task of lastPost) {
    if (!task.user_id) continue;
    try {
      await bot.sendMessage(task.user_id, '‚è∞ –ß–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω –±—É–¥–µ –æ—Å—Ç–∞–Ω–Ω—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è –≤–∞—à–æ–≥–æ –∞–≤—Ç–æ–ø–æ—Å—Ç—É!');
      await db.runAsync('UPDATE autopost_tasks SET notified_last = 1 WHERE id = ?', [task.id]);
    } catch (error) {
      console.error(`–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—è ${task.user_id}:`, error.message);
    }
  }
  
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏
  const completed = await db.allAsync(`
    SELECT at.*, ps.user_id
    FROM autopost_tasks at
    LEFT JOIN premium_services ps ON ps.announcement_id = at.announcement_id
    WHERE at.status = 'active'
    AND datetime(at.expires_at) <= datetime('now')
  `);
  
  for (const task of completed) {
    if (!task.user_id) continue;
    try {
      const serviceInfo = config.PREMIUM_SERVICES[`autopost_${task.duration}`];
      await bot.sendMessage(task.user_id, `‚úÖ –í–∞—à –∞–≤—Ç–æ–ø–æ—Å—Ç "${serviceInfo ? serviceInfo.name : task.duration + ' –≥–æ–¥–∏–Ω'}" –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\nüìä –í—Å—å–æ–≥–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π: ${task.duration}\n\n–î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!`);
    } catch (error) {
      console.error(`–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—è ${task.user_id}:`, error.message);
    }
  }
  
  // –û—á–∏—â–µ–Ω–Ω—è –∑–∞–∫—ñ–Ω—á–µ–Ω–∏—Ö –∞–≤—Ç–æ–ø–æ—Å—Ç—ñ–≤
  await db.runAsync(`
    UPDATE autopost_tasks
    SET status = 'expired'
    WHERE datetime(expires_at) <= datetime('now') AND status = 'active'
  `);
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –±–æ—Ç–∞
bot.on('polling_error', (error) => {
  console.error('–ü–æ–º–∏–ª–∫–∞ polling:', error.message);
});

bot.on('error', (error) => {
  console.error('–ü–æ–º–∏–ª–∫–∞ –±–æ—Ç–∞:', error.message);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection:', reason);
});

console.log('ü§ñ HeartUA Bot –∑–∞–ø—É—â–µ–Ω–æ!');
if (config.ADMIN_IDS && Array.isArray(config.ADMIN_IDS)) {
  console.log(`üë• –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏: ${config.ADMIN_IDS.join(', ')}`);
} else {
  console.log(`üë§ –ê–¥–º—ñ–Ω ID: ${config.ADMIN_ID}`);
}


